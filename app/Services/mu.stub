<?php

if (!defined('ABSPATH')) {
    return;
}

if(defined('FLUENT_SNIPPETS_RUNNING_MU')) {
    return;
}

define('FLUENT_SNIPPETS_RUNNING_MU', true);
define('FLUENT_SNIPPETS_RUNNING_MU_VERSION', '1.0');

class FluentSnippetCondition
{
    public function evaluate($conditionSettings)
    {
        if (empty($conditionSettings) || empty($conditionSettings['status']) || $conditionSettings['status'] != 'yes' || empty($conditionSettings['items'])) {
            return true;
        }
        $conditionItems = array_filter($conditionSettings['items']);
        if (!$conditionItems) {
            return true;
        }
        foreach ($conditionItems as $conditions) {
            if ($this->evaluateItems($conditions)) {
                return true;
            }
        }
        return false;
    }

    private function evaluateItems($conditions)
    {
        foreach ($conditions as $condition) {
            if (!$this->evaluateCondition($condition)) {
                return false;
            }
        }
        return true;
    }

    private function evaluateCondition($condition)
    {
        if (empty($condition['source']) || empty($condition['operator']) || empty($condition['value'])) {
            return false;
        }
        $source = $condition['source'][0];

        switch ($source) {
            case 'user':
                return $this->evaluateUserCondition($condition['source'][1], $condition['operator'], $condition['value']);
            case 'page':
                return $this->evaluatePageCondition($condition['source'][1], $condition['operator'], $condition['value']);
            case 'date':
                return $this->evaluateDateCondition($condition['source'][1], $condition['operator'], $condition['value']);
            default:
                return false;
        }
    }

    private function evaluateUserCondition($key, $operator, $value)
    {
        if ($key == 'authenticated') {
            return is_user_logged_in();
        }

        if ($key == 'role') {
            $userId = get_current_user_id();
            if ($userId == 0) {
                $roles = [];
            } else {
                $user = get_user_by('ID', $userId);
                $roles = $user->roles;
            }
            return $this->checkValues($roles, $value, $operator);
        }
        return false;
    }

    private function evaluatePageCondition($key, $operator, $value)
    {
        switch ($key) {
            case 'page_type':
                $currentPageType = $this->getCurrentPageType();
                return $this->checkValues($currentPageType, $value, $operator);
            case 'post_type':
                if (!is_singular() && !is_page()) {
                    return false;
                }

                $postType = get_post_type();
                return $this->checkValues($postType, $value, $operator);
            case 'taxonomy_page':
                $queried_object = get_queried_object();
                $tax = isset($queried_object->taxonomy) ? $queried_object->taxonomy : '';
                if (!$tax) {
                    return false;
                }

                return $this->checkValues($tax, $value, $operator);
            case 'url':
                // get current url
                global $wp;
                $url = isset($wp->request) ? trailingslashit(add_query_arg($_GET, home_url($wp->request))) : '';
                if (!$url) {
                    return false;
                }
                return $this->checkValues($url, $value, $operator);
            case 'page_ids':
                if (!is_singular() && !is_page()) {
                    return false;
                }

                $value = array_map(function ($item) {
                    return intval(trim($item));
                }, explode(',', $value));
                $value = array_filter($value);

                if (!$value) {
                    return false;
                }

                $pageId = get_the_ID();
                return $this->checkValues($pageId, $value, $operator);
            default:
                return false;
        }
    }

    private function evaluateDateCondition($key, $operator, $value)
    {
        switch ($key) {
            case 'date_range':
                $currentTime = current_time('timestamp');
                return $this->checkValues($currentTime, $value, $operator);
            case 'day_of_week':
                $dayOfWeek = strtolower(date('D', current_time('timestamp')));
                return $this->checkValues($dayOfWeek, $value, $operator);
            case 'time_range':
                $operator = str_replace('date_', 'number_', $operator);
                $currentTime = date('His', current_time('timestamp'));

                $currentDay = date('Y-m-d', current_time('timestamp'));

                $value = [
                    (int) date('His', strtotime($currentDay.' '.$value[0])),
                    (int) date('His', strtotime($currentDay.' '.$value[1])),
                ];

                return $this->checkValues($currentTime, $value, $operator);
        }

        return false;
    }

    private function getCurrentPageType()
    {
        global $wp_query;

        if (empty($wp_query)) {
            return '';
        }

        if (is_front_page() || is_home()) {
            return 'is_front_page';
        }
        if (is_singular()) {
            return 'is_singular';
        }
        if (is_archive()) {
            return 'is_archive';
        }
        if (is_search()) {
            return 'is_search';
        }
        if (is_404()) {
            return 'is_404';
        }
        if (is_author()) {
            return 'is_author';
        }

        return '';
    }

    /*
     * $sourceValue = dynamic value
     * $dataValue = user input value
     */
    private function checkValues($sourceValue, $dataValue, $operator)
    {
        switch ($operator) {
            case '=':
                if (is_array($sourceValue)) {
                    return in_array($dataValue, $sourceValue);
                }
                return $sourceValue == $dataValue;
                break;
            case '!=':
                if (is_array($sourceValue)) {
                    return !in_array($dataValue, $sourceValue);
                }
                return $sourceValue != $dataValue;
                break;
            case '>':
                return $sourceValue > $dataValue;
                break;
            case '<':
                return $sourceValue < $dataValue;
                break;
            case '>=':
                return $sourceValue >= $dataValue;
                break;
            case '<=':
                return $sourceValue <= $dataValue;
                break;
            case 'startsWith':
                //  return Str::startsWith($sourceValue, $dataValue);
                break;
            case 'endsWith':
                // return Str::endsWith($sourceValue, $dataValue);
                break;
            case 'contains':
                $sourceValue = strtolower($sourceValue);
                if (is_string($dataValue)) {
                    $dataValue = strtolower($dataValue);
                }
                return str_contains($sourceValue, $dataValue);
                break;
            case 'doNotContains':
            case 'not_contains':
                $sourceValue = strtolower($sourceValue);
                if (is_string($dataValue)) {
                    $dataValue = strtolower($dataValue);
                }
                return !str_contains($sourceValue, $dataValue);
                break;
            case 'length_equal':
                if (is_array($sourceValue)) {
                    return count($sourceValue) == $dataValue;
                }
                $sourceValue = strval($sourceValue);
                return strlen($sourceValue) == $dataValue;
                break;
            case 'length_less_than':
                if (is_array($sourceValue)) {
                    return count($sourceValue) < $dataValue;
                }
                $sourceValue = strval($sourceValue);
                return strlen($sourceValue) < $dataValue;
                break;
            case 'length_greater_than':
                if (is_array($sourceValue)) {
                    return count($sourceValue) > $dataValue;
                }
                $sourceValue = strval($sourceValue);
                return strlen($sourceValue) > $dataValue;
                break;
            case 'match_all':
            case 'in_all':
                $sourceValue = (array)$sourceValue;
                $dataValue = (array)$dataValue;
                sort($sourceValue);
                sort($dataValue);
                return $sourceValue == $dataValue;
                break;
            case 'match_none_of':
            case 'not_in_all':
                $sourceValue = (array)$sourceValue;
                $dataValue = (array)$dataValue;
                return !(array_intersect($sourceValue, $dataValue));
                break;
            case 'in':
                $dataValue = (array)$dataValue;
                if (is_array($sourceValue)) {
                    return !!(array_intersect($sourceValue, $dataValue));
                }
                return in_array($sourceValue, $dataValue);
            case 'not_in':
                $dataValue = (array)$dataValue;
                if (is_array($sourceValue)) {
                    return !(array_intersect($sourceValue, $dataValue));
                }
                return !in_array($sourceValue, $dataValue);
            case 'before':
                return strtotime($sourceValue) < strtotime($dataValue);
            case 'after':
                return strtotime($sourceValue) > strtotime($dataValue);
            case 'date_equal':
                return date('YMD', strtotime($sourceValue)) == date('YMD', strtotime($dataValue));
            case 'date_within':
                $range = [strtotime($dataValue[0]), strtotime($dataValue[1])];
                return strtotime($sourceValue) >= $range[0] && strtotime($sourceValue) <= $range[1];
            case 'date_not_within':
                $range = [strtotime($dataValue[0]), strtotime($dataValue[1])];
                return strtotime($sourceValue) <= $range[0] || strtotime($sourceValue) >= $range[1];
            case 'number_within':
                return $sourceValue >= $dataValue[0] && $sourceValue <= $dataValue[1];
            case 'number_not_within':
                return $sourceValue <= $dataValue[0] || $sourceValue >= $dataValue[1];
            case 'days_before':
                return strtotime($sourceValue) < strtotime("-{$dataValue} days", current_time('timestamp'));
            case 'days_within':
                return strtotime($sourceValue) > strtotime("-{$dataValue} days", current_time('timestamp'));
            case 'is_null':
                return !$sourceValue;
            case 'not_null':
                return !!$sourceValue;
        }
        return false;
    }
}

class FluentSnippetsMuRunner
{
    private $storageDir = '';

    public function boot()
    {
        if ($this->isDisabled()) {
            return;
        }

        $this->setStorageDir();
        $this->runSnippets();
        add_shortcode('fluent_snippet', [$this, 'handleShortcode']);
    }

    private function setStorageDir()
    {
        $upload_dir = wp_upload_dir();
        $baseDir = $upload_dir['basedir'];
        $this->storageDir = $baseDir . '/fluent-snippet-storage';
    }

    private function runSnippets()
    {
        if (!file_exists($this->storageDir . '/index.php')) {
            return;
        }

        $config = include $this->storageDir . '/index.php';

        if (empty($config) || empty($config['published']) || !is_array($config['published'])) {
            return; // No config or published scripts exist exists
        }

        if ($config['meta']['force_disabled'] == 'yes') {
            return; // this forcefully disabled via URL
        }

        $snippets = $config['published'];
        $storageDir = $this->storageDir;


        $conditionalClass = new FluentSnippetCondition();

        foreach ($snippets as $fileName => $snippet) {
            $file = $storageDir . '/' . sanitize_file_name($fileName);
            if (!file_exists($file)) {
                continue;
            }

            $type = $snippet['type'];
            $runAt = $snippet['run_at'];

            switch ($type) {
                case 'PHP':
                    add_action('init', function () use ($file, $snippet, $conditionalClass, $runAt) {
                        if (!$conditionalClass->evaluate($snippet['condition'])) {
                            return;
                        }
                        if ($runAt == 'backend') {
                            if (is_admin()) {
                                require_once $file;
                            }
                            return;
                        }
                        require_once $file;
                    }, $snippet['priority']);
                    break;
                case 'js':
                    if(!$runAt) {
                        $runAt = 'wp_footer';
                    }
                    if (in_array($runAt, ['wp_head', 'wp_footer'])) {
                        add_action($runAt, function () use ($file, $snippet, $conditionalClass) {
                            if (!$conditionalClass->evaluate($snippet['condition'])) {
                                return;
                            }
                            $code = $this->parseBlock(file_get_contents($file), true);
                            ?>
                            <script><?php echo $code; ?></script>
                            <?php
                        }, 99);
                    }
                    break;
                case 'css':
                    if ($runAt == 'everywehere' && is_admin()) {
                        $runAt = 'admin_head';
                    } else {
                        $runAt = 'wp_head';
                    }
                    add_action($runAt, function () use ($file, $snippet, $conditionalClass) {
                        if (!$conditionalClass->evaluate($snippet['condition'])) {
                            return;
                        }
                        $code = $this->parseBlock(file_get_contents($file), true);
                        ?>
                        <style><?php echo $code; ?></style>
                        <?php
                    }, $snippet['priority']);
                    break;
                case 'php_content':
                    if (in_array($runAt, ['wp_footer', 'wp_head', 'wp_body_open'])) {
                        add_action($runAt, function () use ($file, $snippet, $conditionalClass) {
                            if (!$conditionalClass->evaluate($snippet['condition'])) {
                                return;
                            }
                            require_once $file;
                        }, $snippet['priority']);
                    }
                    break;
                default:
                    break;
            }
        }
    }

    private function isDisabled()
    {
        return (defined('FLUENT_SNIPPETS_SAFE_MODE') && FLUENT_SNIPPETS_SAFE_MODE) || !apply_filters('fluent_snippets/run_snippets', true);
    }

    public function handleShortcode($atts, $content = null)
    {
        $atts = shortcode_atts([
            'id' => '',
        ], $atts);

        $fileName = $atts['id'];
        if (empty($fileName)) {
            return '';
        }

        if (!file_exists($this->storageDir . '/index.php')) {
            return '';
        }

        $config = include $this->storageDir . '/index.php';

        if ($config['meta']['force_disabled'] == 'yes') {
            return $this->shortCodeError('Snippets are disabled');
        }

        $fileName = sanitize_file_name($fileName . '.php');
        if (isset($config['error_files'][$fileName])) {
            return $this->shortCodeError('Snippet has an error');
        }

        $snippet = $this->findByFileName($fileName);

        if (is_wp_error($snippet)) {
            return $this->shortCodeError($snippet->get_error_message());
        }

        if (empty($snippet['meta']['type']) || $snippet['meta']['type'] !== 'php_content') {
            return $this->shortCodeError('Snippet type is not PHP Content');
        }

        if (empty($snippet['meta']['run_at']) || $snippet['meta']['run_at'] != 'shortcode') {
            return $this->shortCodeError('Snippet run at is not shortcode');
        }

        if (empty($snippet['meta']['status']) || $snippet['meta']['status'] != 'published') {
            return $this->shortCodeError('Snippet status is not published');
        }

        ob_start();

        $maybeReturn = include $snippet['file'];

        $result = ob_get_clean();

        if ($result) {
            return $result;
        }

        if (is_string($maybeReturn) || is_numeric($maybeReturn)) {
            return $maybeReturn;
        }

        return $this->shortCodeError('Return Data is not valid. Return data need to be string or number');
    }

    public function findByFileName($fileName)
    {

        $file = $this->storageDir . '/' . $fileName;

        if (!file_exists($file) || $fileName === 'index.php') {
            return new \WP_Error('file_not_found', 'File not found');
        }

        $fileContent = file_get_contents($this->storageDir . '/' . $fileName);
        [$docBlockArray, $code] = $this->parseBlock($fileContent);

        return [
            'meta'   => $docBlockArray,
            'code'   => $code,
            'file'   => $file,
            'status' => (!empty($docBlockArray['status'])) ? $docBlockArray['status'] : 'draft'
        ];
    }

    private function parseBlock($fileContent, $codeOnly = false)
    {
        // get content from // <Internal Doc Start> to // <Internal Doc End>
        $fileContent = explode('// <Internal Doc Start>', $fileContent);

        if (count($fileContent) < 2) {
            if($codeOnly) {
                return '';
            }
            return [null, null];
        }

        $fileContent = explode('// <Internal Doc End> ?>' . PHP_EOL, $fileContent[1]);
        $docBlock = $fileContent[0];
        $code = $fileContent[1];

        if($codeOnly) {
            return $code;
        }

        $docBlock = explode('*', $docBlock);
        // Explode by : and get the key and value
        $docBlockArray = [
            'name'        => '',
            'status'      => '',
            'tags'        => '',
            'description' => '',
            'type'        => '',
            'run_at'      => '',
            'group'       => ''
        ];

        foreach ($docBlock as $key => $value) {
            $value = trim($value);
            $arr = explode(':', $value);
            if (count($arr) < 2) {
                continue;
            }

            // get the first item from the array and remove it from $arr
            $key = array_shift($arr);
            $key = trim(str_replace('@', '', $key));
            if (!$key) {
                continue;
            }
            $docBlockArray[$key] = trim(implode(':', $arr));
        }

        return [$docBlockArray, $code];
    }

    private function shortCodeError($message)
    {

        if (!current_user_can('manage_options')) {
            return "";
        }

        if (!$message) {
            $message = 'Shortcode could not be rendered';
        }

        return "<div class='fluent-snippet-error'>'.wp_kses_post($message).'</div>";
    }
}

add_action('plugins_loaded', function () {
    if (!defined('FLUENT_SNIPPETS_PLUGIN_PATH')) {
        (new FluentSnippetsMuRunner)->boot();
    }
}, 9);
